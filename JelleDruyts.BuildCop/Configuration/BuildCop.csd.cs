//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// The configuration settings for BuildCop.
    /// </summary>
    public partial class BuildCopConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the BuildCopConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BuildCopConfigurationSectionName = "buildCopConfiguration";
        
        /// <summary>
        /// Gets the BuildCopConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration Instance
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.BuildCopConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region BuildGroups Property
        /// <summary>
        /// The XML name of the <see cref="BuildGroups"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BuildGroupsPropertyName = "buildGroups";
        
        /// <summary>
        /// Gets the build groups.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The build groups.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.BuildGroupsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.BuildGroupCollection BuildGroups
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildGroupCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.BuildGroupsPropertyName]));
            }
        }
        #endregion
        
        #region SharedRules Property
        /// <summary>
        /// The XML name of the <see cref="SharedRules"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SharedRulesPropertyName = "sharedRules";
        
        /// <summary>
        /// Gets the shared rules.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The shared rules.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.SharedRulesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.RuleCollection SharedRules
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.RuleCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.SharedRulesPropertyName]));
            }
        }
        #endregion
        
        #region Formatters Property
        /// <summary>
        /// The XML name of the <see cref="Formatters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FormattersPropertyName = "formatters";
        
        /// <summary>
        /// Gets the formatters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The formatters.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.FormattersPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.FormatterCollection Formatters
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.FormatterCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.FormattersPropertyName]));
            }
        }
        #endregion
        
        #region OutputTypeMappings Property
        /// <summary>
        /// The XML name of the <see cref="OutputTypeMappings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OutputTypeMappingsPropertyName = "outputTypeMappings";
        
        /// <summary>
        /// Gets the output type mappings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The output type mappings.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.OutputTypeMappingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.OutputTypeCollection OutputTypeMappings
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.OutputTypeCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildCopConfiguration.OutputTypeMappingsPropertyName]));
            }
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines a build group.
    /// </summary>
    public partial class BuildGroupElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of this build group.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of this build group.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.NamePropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets a value that determines if this build group is enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("A value that determines if this build group is enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.EnabledPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region BuildFiles Property
        /// <summary>
        /// The XML name of the <see cref="BuildFiles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BuildFilesPropertyName = "buildFiles";
        
        /// <summary>
        /// Gets the build files in this build group.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The build files in this build group.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.BuildFilesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.BuildFilesElement BuildFiles
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildFilesElement)(base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.BuildFilesPropertyName]));
            }
        }
        #endregion
        
        #region Rules Property
        /// <summary>
        /// The XML name of the <see cref="Rules"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RulesPropertyName = "rules";
        
        /// <summary>
        /// Gets the rules in this build group.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The rules in this build group.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.RulesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.RuleCollection Rules
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.RuleCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildGroupElement.RulesPropertyName]));
            }
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// A collection of BuildGroupElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JelleDruyts.BuildCop.Configuration.BuildGroupCollection.BuildGroupElementPropertyName)]
    public partial class BuildGroupCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BuildGroupElementPropertyName = "buildGroup";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::JelleDruyts.BuildCop.Configuration.BuildGroupCollection.BuildGroupElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JelleDruyts.BuildCop.Configuration.BuildGroupCollection.BuildGroupElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JelleDruyts.BuildCop.Configuration.BuildGroupElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JelleDruyts.BuildCop.Configuration.BuildGroupElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.BuildGroupElement this[int index]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildGroupElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.BuildGroupElement this[object name]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildGroupElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="buildGroup">The <see cref="global::JelleDruyts.BuildCop.Configuration.BuildGroupElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::JelleDruyts.BuildCop.Configuration.BuildGroupElement buildGroup)
        {
            base.BaseAdd(buildGroup);
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// A collection of FormatterElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JelleDruyts.BuildCop.Configuration.FormatterElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JelleDruyts.BuildCop.Configuration.FormatterCollection.FormatterElementPropertyName)]
    public partial class FormatterCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FormatterElementPropertyName = "formatter";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::JelleDruyts.BuildCop.Configuration.FormatterCollection.FormatterElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JelleDruyts.BuildCop.Configuration.FormatterCollection.FormatterElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JelleDruyts.BuildCop.Configuration.FormatterElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JelleDruyts.BuildCop.Configuration.FormatterElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.FormatterElement this[int index]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.FormatterElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.FormatterElement this[object name]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.FormatterElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="formatter">The <see cref="global::JelleDruyts.BuildCop.Configuration.FormatterElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::JelleDruyts.BuildCop.Configuration.FormatterElement formatter)
        {
            base.BaseAdd(formatter);
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines a formatter for a BuildCop report.
    /// </summary>
    public partial class FormatterElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of this formatter.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of this formatter.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.FormatterElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.NamePropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type of this formatter.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of this formatter.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.FormatterElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.TypePropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region MinimumLogLevel Property
        /// <summary>
        /// The XML name of the <see cref="MinimumLogLevel"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MinimumLogLevelPropertyName = "minimumLogLevel";
        
        /// <summary>
        /// Gets or sets the minimum log level this formatter should display.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The minimum log level this formatter should display.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.FormatterElement.MinimumLogLevelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=JelleDruyts.BuildCop.Reporting.LogLevel.Information)]
        public virtual global::JelleDruyts.BuildCop.Reporting.LogLevel MinimumLogLevel
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Reporting.LogLevel)(base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.MinimumLogLevelPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.FormatterElement.MinimumLogLevelPropertyName] = value;
            }
        }
        #endregion
        
        #region Custom Child Elements
        /// <summary>
        /// Gets a value indicating whether an unknown element is encountered during deserialization.
        /// </summary>
        /// <param name="elementName">The name of the unknown subelement.</param>
        /// <param name="reader">The <see cref="global::System.Xml.XmlReader"/> being used for deserialization.</param>
        /// <returns>
        /// <see langword="true"/> when an unknown element is encountered while deserializing; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="global::System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.- or -One or more of the element's attributes is locked.- or -<paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.- or -The element has a Boolean attribute with an invalid value.- or -An attempt was made to deserialize a property more than once.- or -An attempt was made to deserialize a property that is not a valid member of the element.- or -The element cannot contain a CDATA or text element.</exception>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool OnDeserializeUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // You have indicated that this configuration element has
            // custom child elements. Copy the commented code below to
            // a separate file and implement the method.
            // 
            // public partial class FormatterElement
            // {
            //     
            //     private bool HandleUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.HandleUnrecognizedElement(elementName, reader);
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// A collection of RuleElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JelleDruyts.BuildCop.Configuration.RuleElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JelleDruyts.BuildCop.Configuration.RuleCollection.RuleElementPropertyName)]
    public partial class RuleCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RuleElementPropertyName = "rule";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::JelleDruyts.BuildCop.Configuration.RuleCollection.RuleElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JelleDruyts.BuildCop.Configuration.RuleCollection.RuleElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JelleDruyts.BuildCop.Configuration.RuleElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JelleDruyts.BuildCop.Configuration.RuleElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.RuleElement this[int index]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.RuleElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.RuleElement this[object name]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.RuleElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="rule">The <see cref="global::JelleDruyts.BuildCop.Configuration.RuleElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::JelleDruyts.BuildCop.Configuration.RuleElement rule)
        {
            base.BaseAdd(rule);
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// A collection of OutputTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JelleDruyts.BuildCop.Configuration.OutputTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JelleDruyts.BuildCop.Configuration.OutputTypeCollection.OutputTypeElementPropertyName)]
    public partial class OutputTypeCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OutputTypeElementPropertyName = "outputType";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::JelleDruyts.BuildCop.Configuration.OutputTypeCollection.OutputTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JelleDruyts.BuildCop.Configuration.OutputTypeCollection.OutputTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JelleDruyts.BuildCop.Configuration.OutputTypeElement)(element)).Alias;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JelleDruyts.BuildCop.Configuration.OutputTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.OutputTypeElement this[int index]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.OutputTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="alias">The key of the <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.OutputTypeElement this[object alias]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.OutputTypeElement)(base.BaseGet(alias)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="outputType">The <see cref="global::JelleDruyts.BuildCop.Configuration.OutputTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::JelleDruyts.BuildCop.Configuration.OutputTypeElement outputType)
        {
            base.BaseAdd(outputType);
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines an output type alias for a project type GUID.
    /// </summary>
    public partial class OutputTypeElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Alias Property
        /// <summary>
        /// The XML name of the <see cref="Alias"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AliasPropertyName = "alias";
        
        /// <summary>
        /// Gets or sets the alias of this output type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The alias of this output type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.AliasPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Alias
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.AliasPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.AliasPropertyName] = value;
            }
        }
        #endregion
        
        #region ProjectTypeGuid Property
        /// <summary>
        /// The XML name of the <see cref="ProjectTypeGuid"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ProjectTypeGuidPropertyName = "projectTypeGuid";
        
        /// <summary>
        /// Gets or sets the project type GUID of this output type alias.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The project type GUID of this output type alias.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.ProjectTypeGuidPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ProjectTypeGuid
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.ProjectTypeGuidPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.OutputTypeElement.ProjectTypeGuidPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines a rule.
    /// </summary>
    public partial class RuleElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name of this rule.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name of this rule.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.RuleElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.RuleElement.NamePropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.RuleElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type of this rule.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type of this rule.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.RuleElement.TypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.RuleElement.TypePropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.RuleElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region ExcludedFiles Property
        /// <summary>
        /// The XML name of the <see cref="ExcludedFiles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExcludedFilesPropertyName = "excludedFiles";
        
        /// <summary>
        /// Gets or sets the string to find in the names of files to exclude for this rule.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The string to find in the names of files to exclude for this rule.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedFilesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExcludedFiles
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedFilesPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedFilesPropertyName] = value;
            }
        }
        #endregion
        
        #region ExcludedOutputTypes Property
        /// <summary>
        /// The XML name of the <see cref="ExcludedOutputTypes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExcludedOutputTypesPropertyName = "excludedOutputTypes";
        
        /// <summary>
        /// Gets or sets the string to find in the output type of files to exclude for this rule.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The string to find in the output type of files to exclude for this rule.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedOutputTypesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExcludedOutputTypes
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedOutputTypesPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.RuleElement.ExcludedOutputTypesPropertyName] = value;
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets a value that determines if this rule is enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("A value that determines if this rule is enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.RuleElement.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::JelleDruyts.BuildCop.Configuration.RuleElement.EnabledPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.RuleElement.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Custom Child Elements
        /// <summary>
        /// Gets a value indicating whether an unknown element is encountered during deserialization.
        /// </summary>
        /// <param name="elementName">The name of the unknown subelement.</param>
        /// <param name="reader">The <see cref="global::System.Xml.XmlReader"/> being used for deserialization.</param>
        /// <returns>
        /// <see langword="true"/> when an unknown element is encountered while deserializing; otherwise, <see langword="false"/>.
        /// </returns>
        /// <exception cref="global::System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.- or -One or more of the element's attributes is locked.- or -<paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.- or -The element has a Boolean attribute with an invalid value.- or -An attempt was made to deserialize a property more than once.- or -An attempt was made to deserialize a property that is not a valid member of the element.- or -The element cannot contain a CDATA or text element.</exception>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool OnDeserializeUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // You have indicated that this configuration element has
            // custom child elements. Copy the commented code below to
            // a separate file and implement the method.
            // 
            // public partial class RuleElement
            // {
            //     
            //     private bool HandleUnrecognizedElement(string elementName, global::System.Xml.XmlReader reader)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.HandleUnrecognizedElement(elementName, reader);
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines the build files to be processed.
    /// </summary>
    public partial class BuildFilesElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ExcludedFiles Property
        /// <summary>
        /// The XML name of the <see cref="ExcludedFiles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExcludedFilesPropertyName = "excludedFiles";
        
        /// <summary>
        /// Gets or sets the string to find in the names of files to exclude in the given root path.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The string to find in the names of files to exclude in the given root path.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildFilesElement.ExcludedFilesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExcludedFiles
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildFilesElement.ExcludedFilesPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildFilesElement.ExcludedFilesPropertyName] = value;
            }
        }
        #endregion
        
        #region Paths Property
        /// <summary>
        /// The XML name of the <see cref="Paths"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PathsPropertyName = "paths";
        
        /// <summary>
        /// Gets the paths to the build files to be processed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The paths to the build files to be processed.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildFilesElement.PathsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::JelleDruyts.BuildCop.Configuration.BuildFilePathCollection Paths
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildFilePathCollection)(base[global::JelleDruyts.BuildCop.Configuration.BuildFilesElement.PathsPropertyName]));
            }
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// A collection of BuildFilePathElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::JelleDruyts.BuildCop.Configuration.BuildFilePathCollection.BuildFilePathElementPropertyName)]
    public partial class BuildFilePathCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BuildFilePathElementPropertyName = "path";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::JelleDruyts.BuildCop.Configuration.BuildFilePathCollection.BuildFilePathElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JelleDruyts.BuildCop.Configuration.BuildFilePathCollection.BuildFilePathElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement)(element)).RootPath;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement this[int index]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> with the specified key.
        /// </summary>
        /// <param name="rootPath">The key of the <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement this[object rootPath]
        {
            get
            {
                return ((global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement)(base.BaseGet(rootPath)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="path">The <see cref="global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement path)
        {
            base.BaseAdd(path);
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Configuration
{
    
    
    /// <summary>
    /// Defines a build file path.
    /// </summary>
    public partial class BuildFilePathElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region RootPath Property
        /// <summary>
        /// The XML name of the <see cref="RootPath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RootPathPropertyName = "rootPath";
        
        /// <summary>
        /// Gets or sets the root path to look for build files.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The root path to look for build files.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.RootPathPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string RootPath
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.RootPathPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.RootPathPropertyName] = value;
            }
        }
        #endregion
        
        #region SearchPattern Property
        /// <summary>
        /// The XML name of the <see cref="SearchPattern"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SearchPatternPropertyName = "searchPattern";
        
        /// <summary>
        /// Gets or sets the search string to match against the names of files to include in the given root path.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The search string to match against the names of files to include in the given roo" +
            "t path.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.SearchPatternPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SearchPattern
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.SearchPatternPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.SearchPatternPropertyName] = value;
            }
        }
        #endregion
        
        #region ExcludedFiles Property
        /// <summary>
        /// The XML name of the <see cref="ExcludedFiles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ExcludedFilesPropertyName = "excludedFiles";
        
        /// <summary>
        /// Gets or sets the string to find in the names of files to exclude in the given root path.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The string to find in the names of files to exclude in the given root path.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.ExcludedFilesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExcludedFiles
        {
            get
            {
                return ((string)(base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.ExcludedFilesPropertyName]));
            }
            set
            {
                base[global::JelleDruyts.BuildCop.Configuration.BuildFilePathElement.ExcludedFilesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JelleDruyts.BuildCop.Reporting
{
    
    
    /// <summary>
    /// Specifies log levels for log entries.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum LogLevel
    {
        
        /// <summary>
        /// The log entry is considered informational.
        /// </summary>
        Information = 0,
        
        /// <summary>
        /// The log entry is considered a warning.
        /// </summary>
        Warning = 1,
        
        /// <summary>
        /// The log entry is considered an error.
        /// </summary>
        Error = 2,
        
        /// <summary>
        /// The log entry is an exception.
        /// </summary>
        Exception = 3,
    }
}
